/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-03-26 20:30:19 UTC)
 * on 2015-05-27 at 16:25:17 UTC 
 * Modify at your own risk.
 */

package com.nadajp.littletalkers.server.littletalkersapi;

/**
 * Service definition for Littletalkersapi (v1).
 *
 * <p>
 * LittleTalkers API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link LittletalkersapiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Littletalkersapi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.18.0-rc of the littletalkersapi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://littletalkerstest.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "littletalkersapi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Littletalkersapi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Littletalkersapi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "getKid".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link GetKid#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @param id
   * @return the request
   */
  public GetKid getKid(java.lang.Long userId, java.lang.Long id) throws java.io.IOException {
    GetKid result = new GetKid(userId, id);
    initialize(result);
    return result;
  }

  public class GetKid extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.Kid> {

    private static final String REST_PATH = "kid/{userId}/{id}";

    /**
     * Create a request for the method "getKid".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link GetKid#execute()} method to invoke the remote operation.
     * <p> {@link
     * GetKid#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @param id
     * @since 1.13
     */
    protected GetKid(java.lang.Long userId, java.lang.Long id) {
      super(Littletalkersapi.this, "GET", REST_PATH, null, com.nadajp.littletalkers.server.littletalkersapi.model.Kid.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetKid setAlt(java.lang.String alt) {
      return (GetKid) super.setAlt(alt);
    }

    @Override
    public GetKid setFields(java.lang.String fields) {
      return (GetKid) super.setFields(fields);
    }

    @Override
    public GetKid setKey(java.lang.String key) {
      return (GetKid) super.setKey(key);
    }

    @Override
    public GetKid setOauthToken(java.lang.String oauthToken) {
      return (GetKid) super.setOauthToken(oauthToken);
    }

    @Override
    public GetKid setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetKid) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetKid setQuotaUser(java.lang.String quotaUser) {
      return (GetKid) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetKid setUserIp(java.lang.String userIp) {
      return (GetKid) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetKid setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetKid setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetKid set(String parameterName, Object value) {
      return (GetKid) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getProfile".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link GetProfile#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public GetProfile getProfile() throws java.io.IOException {
    GetProfile result = new GetProfile();
    initialize(result);
    return result;
  }

  public class GetProfile extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile> {

    private static final String REST_PATH = "userprofile";

    /**
     * Create a request for the method "getProfile".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link GetProfile#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetProfile#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected GetProfile() {
      super(Littletalkersapi.this, "GET", REST_PATH, null, com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile.class);
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetProfile setAlt(java.lang.String alt) {
      return (GetProfile) super.setAlt(alt);
    }

    @Override
    public GetProfile setFields(java.lang.String fields) {
      return (GetProfile) super.setFields(fields);
    }

    @Override
    public GetProfile setKey(java.lang.String key) {
      return (GetProfile) super.setKey(key);
    }

    @Override
    public GetProfile setOauthToken(java.lang.String oauthToken) {
      return (GetProfile) super.setOauthToken(oauthToken);
    }

    @Override
    public GetProfile setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetProfile) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetProfile setQuotaUser(java.lang.String quotaUser) {
      return (GetProfile) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetProfile setUserIp(java.lang.String userIp) {
      return (GetProfile) super.setUserIp(userIp);
    }

    @Override
    public GetProfile set(String parameterName, Object value) {
      return (GetProfile) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getProfileById".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link GetProfileById#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public GetProfileById getProfileById(java.lang.Long id) throws java.io.IOException {
    GetProfileById result = new GetProfileById(id);
    initialize(result);
    return result;
  }

  public class GetProfileById extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile> {

    private static final String REST_PATH = "userprofile/{id}";

    /**
     * Create a request for the method "getProfileById".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link GetProfileById#execute()} method to invoke the remote
     * operation. <p> {@link GetProfileById#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetProfileById(java.lang.Long id) {
      super(Littletalkersapi.this, "GET", REST_PATH, null, com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetProfileById setAlt(java.lang.String alt) {
      return (GetProfileById) super.setAlt(alt);
    }

    @Override
    public GetProfileById setFields(java.lang.String fields) {
      return (GetProfileById) super.setFields(fields);
    }

    @Override
    public GetProfileById setKey(java.lang.String key) {
      return (GetProfileById) super.setKey(key);
    }

    @Override
    public GetProfileById setOauthToken(java.lang.String oauthToken) {
      return (GetProfileById) super.setOauthToken(oauthToken);
    }

    @Override
    public GetProfileById setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetProfileById) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetProfileById setQuotaUser(java.lang.String quotaUser) {
      return (GetProfileById) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetProfileById setUserIp(java.lang.String userIp) {
      return (GetProfileById) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public GetProfileById setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public GetProfileById set(String parameterName, Object value) {
      return (GetProfileById) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getWordDetails".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link GetWordDetails#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @param kidId
   * @param word
   * @return the request
   */
  public GetWordDetails getWordDetails(java.lang.Long userId, java.lang.Long kidId, java.lang.String word) throws java.io.IOException {
    GetWordDetails result = new GetWordDetails(userId, kidId, word);
    initialize(result);
    return result;
  }

  public class GetWordDetails extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.Word> {

    private static final String REST_PATH = "word/{userId}/{kidId}/{word}";

    /**
     * Create a request for the method "getWordDetails".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link GetWordDetails#execute()} method to invoke the remote
     * operation. <p> {@link GetWordDetails#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param userId
     * @param kidId
     * @param word
     * @since 1.13
     */
    protected GetWordDetails(java.lang.Long userId, java.lang.Long kidId, java.lang.String word) {
      super(Littletalkersapi.this, "GET", REST_PATH, null, com.nadajp.littletalkers.server.littletalkersapi.model.Word.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.kidId = com.google.api.client.util.Preconditions.checkNotNull(kidId, "Required parameter kidId must be specified.");
      this.word = com.google.api.client.util.Preconditions.checkNotNull(word, "Required parameter word must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetWordDetails setAlt(java.lang.String alt) {
      return (GetWordDetails) super.setAlt(alt);
    }

    @Override
    public GetWordDetails setFields(java.lang.String fields) {
      return (GetWordDetails) super.setFields(fields);
    }

    @Override
    public GetWordDetails setKey(java.lang.String key) {
      return (GetWordDetails) super.setKey(key);
    }

    @Override
    public GetWordDetails setOauthToken(java.lang.String oauthToken) {
      return (GetWordDetails) super.setOauthToken(oauthToken);
    }

    @Override
    public GetWordDetails setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetWordDetails) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetWordDetails setQuotaUser(java.lang.String quotaUser) {
      return (GetWordDetails) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetWordDetails setUserIp(java.lang.String userIp) {
      return (GetWordDetails) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetWordDetails setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long kidId;

    /**

     */
    public java.lang.Long getKidId() {
      return kidId;
    }

    public GetWordDetails setKidId(java.lang.Long kidId) {
      this.kidId = kidId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String word;

    /**

     */
    public java.lang.String getWord() {
      return word;
    }

    public GetWordDetails setWord(java.lang.String word) {
      this.word = word;
      return this;
    }

    @Override
    public GetWordDetails set(String parameterName, Object value) {
      return (GetWordDetails) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getWordsForKid".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link GetWordsForKid#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @param kidId
   * @return the request
   */
  public GetWordsForKid getWordsForKid(java.lang.Long userId, java.lang.Long kidId) throws java.io.IOException {
    GetWordsForKid result = new GetWordsForKid(userId, kidId);
    initialize(result);
    return result;
  }

  public class GetWordsForKid extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.WordCollection> {

    private static final String REST_PATH = "wordcollection/{userId}/{kidId}";

    /**
     * Create a request for the method "getWordsForKid".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link GetWordsForKid#execute()} method to invoke the remote
     * operation. <p> {@link GetWordsForKid#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param userId
     * @param kidId
     * @since 1.13
     */
    protected GetWordsForKid(java.lang.Long userId, java.lang.Long kidId) {
      super(Littletalkersapi.this, "GET", REST_PATH, null, com.nadajp.littletalkers.server.littletalkersapi.model.WordCollection.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.kidId = com.google.api.client.util.Preconditions.checkNotNull(kidId, "Required parameter kidId must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetWordsForKid setAlt(java.lang.String alt) {
      return (GetWordsForKid) super.setAlt(alt);
    }

    @Override
    public GetWordsForKid setFields(java.lang.String fields) {
      return (GetWordsForKid) super.setFields(fields);
    }

    @Override
    public GetWordsForKid setKey(java.lang.String key) {
      return (GetWordsForKid) super.setKey(key);
    }

    @Override
    public GetWordsForKid setOauthToken(java.lang.String oauthToken) {
      return (GetWordsForKid) super.setOauthToken(oauthToken);
    }

    @Override
    public GetWordsForKid setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetWordsForKid) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetWordsForKid setQuotaUser(java.lang.String quotaUser) {
      return (GetWordsForKid) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetWordsForKid setUserIp(java.lang.String userIp) {
      return (GetWordsForKid) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public GetWordsForKid setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long kidId;

    /**

     */
    public java.lang.Long getKidId() {
      return kidId;
    }

    public GetWordsForKid setKidId(java.lang.Long kidId) {
      this.kidId = kidId;
      return this;
    }

    @Override
    public GetWordsForKid set(String parameterName, Object value) {
      return (GetWordsForKid) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertKid".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link InsertKid#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.Kid}
   * @return the request
   */
  public InsertKid insertKid(com.nadajp.littletalkers.server.littletalkersapi.model.Kid content) throws java.io.IOException {
    InsertKid result = new InsertKid(content);
    initialize(result);
    return result;
  }

  public class InsertKid extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.Kid> {

    private static final String REST_PATH = "kid";

    /**
     * Create a request for the method "insertKid".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link InsertKid#execute()} method to invoke the remote
     * operation. <p> {@link
     * InsertKid#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.Kid}
     * @since 1.13
     */
    protected InsertKid(com.nadajp.littletalkers.server.littletalkersapi.model.Kid content) {
      super(Littletalkersapi.this, "POST", REST_PATH, content, com.nadajp.littletalkers.server.littletalkersapi.model.Kid.class);
    }

    @Override
    public InsertKid setAlt(java.lang.String alt) {
      return (InsertKid) super.setAlt(alt);
    }

    @Override
    public InsertKid setFields(java.lang.String fields) {
      return (InsertKid) super.setFields(fields);
    }

    @Override
    public InsertKid setKey(java.lang.String key) {
      return (InsertKid) super.setKey(key);
    }

    @Override
    public InsertKid setOauthToken(java.lang.String oauthToken) {
      return (InsertKid) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertKid setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertKid) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertKid setQuotaUser(java.lang.String quotaUser) {
      return (InsertKid) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertKid setUserIp(java.lang.String userIp) {
      return (InsertKid) super.setUserIp(userIp);
    }

    @Override
    public InsertKid set(String parameterName, Object value) {
      return (InsertKid) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertProfile".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link InsertProfile#execute()} method to invoke the remote
   * operation.
   *
   * @return the request
   */
  public InsertProfile insertProfile() throws java.io.IOException {
    InsertProfile result = new InsertProfile();
    initialize(result);
    return result;
  }

  public class InsertProfile extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile> {

    private static final String REST_PATH = "userprofile";

    /**
     * Create a request for the method "insertProfile".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link InsertProfile#execute()} method to invoke the remote
     * operation. <p> {@link InsertProfile#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @since 1.13
     */
    protected InsertProfile() {
      super(Littletalkersapi.this, "POST", REST_PATH, null, com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile.class);
    }

    @Override
    public InsertProfile setAlt(java.lang.String alt) {
      return (InsertProfile) super.setAlt(alt);
    }

    @Override
    public InsertProfile setFields(java.lang.String fields) {
      return (InsertProfile) super.setFields(fields);
    }

    @Override
    public InsertProfile setKey(java.lang.String key) {
      return (InsertProfile) super.setKey(key);
    }

    @Override
    public InsertProfile setOauthToken(java.lang.String oauthToken) {
      return (InsertProfile) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertProfile setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertProfile) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertProfile setQuotaUser(java.lang.String quotaUser) {
      return (InsertProfile) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertProfile setUserIp(java.lang.String userIp) {
      return (InsertProfile) super.setUserIp(userIp);
    }

    @Override
    public InsertProfile set(String parameterName, Object value) {
      return (InsertProfile) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertUserData".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link InsertUserData#execute()} method to invoke the remote
   * operation.
   *
   * @param userId
   * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.UserDataWrapper}
   * @return the request
   */
  public InsertUserData insertUserData(java.lang.Long userId, com.nadajp.littletalkers.server.littletalkersapi.model.UserDataWrapper content) throws java.io.IOException {
    InsertUserData result = new InsertUserData(userId, content);
    initialize(result);
    return result;
  }

  public class InsertUserData extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.UserDataWrapper> {

    private static final String REST_PATH = "userdatawrapper/{userId}";

    /**
     * Create a request for the method "insertUserData".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link InsertUserData#execute()} method to invoke the remote
     * operation. <p> {@link InsertUserData#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param userId
     * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.UserDataWrapper}
     * @since 1.13
     */
    protected InsertUserData(java.lang.Long userId, com.nadajp.littletalkers.server.littletalkersapi.model.UserDataWrapper content) {
      super(Littletalkersapi.this, "POST", REST_PATH, content, com.nadajp.littletalkers.server.littletalkersapi.model.UserDataWrapper.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public InsertUserData setAlt(java.lang.String alt) {
      return (InsertUserData) super.setAlt(alt);
    }

    @Override
    public InsertUserData setFields(java.lang.String fields) {
      return (InsertUserData) super.setFields(fields);
    }

    @Override
    public InsertUserData setKey(java.lang.String key) {
      return (InsertUserData) super.setKey(key);
    }

    @Override
    public InsertUserData setOauthToken(java.lang.String oauthToken) {
      return (InsertUserData) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertUserData setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertUserData) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertUserData setQuotaUser(java.lang.String quotaUser) {
      return (InsertUserData) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertUserData setUserIp(java.lang.String userIp) {
      return (InsertUserData) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public InsertUserData setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public InsertUserData set(String parameterName, Object value) {
      return (InsertUserData) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertWord".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link InsertWord#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.Word}
   * @return the request
   */
  public InsertWord insertWord(java.lang.Long userId, com.nadajp.littletalkers.server.littletalkersapi.model.Word content) throws java.io.IOException {
    InsertWord result = new InsertWord(userId, content);
    initialize(result);
    return result;
  }

  public class InsertWord extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.Word> {

    private static final String REST_PATH = "word/{userId}";

    /**
     * Create a request for the method "insertWord".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link InsertWord#execute()} method to invoke the remote
     * operation. <p> {@link
     * InsertWord#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.Word}
     * @since 1.13
     */
    protected InsertWord(java.lang.Long userId, com.nadajp.littletalkers.server.littletalkersapi.model.Word content) {
      super(Littletalkersapi.this, "POST", REST_PATH, content, com.nadajp.littletalkers.server.littletalkersapi.model.Word.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public InsertWord setAlt(java.lang.String alt) {
      return (InsertWord) super.setAlt(alt);
    }

    @Override
    public InsertWord setFields(java.lang.String fields) {
      return (InsertWord) super.setFields(fields);
    }

    @Override
    public InsertWord setKey(java.lang.String key) {
      return (InsertWord) super.setKey(key);
    }

    @Override
    public InsertWord setOauthToken(java.lang.String oauthToken) {
      return (InsertWord) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertWord setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertWord) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertWord setQuotaUser(java.lang.String quotaUser) {
      return (InsertWord) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertWord setUserIp(java.lang.String userIp) {
      return (InsertWord) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long userId;

    /**

     */
    public java.lang.Long getUserId() {
      return userId;
    }

    public InsertWord setUserId(java.lang.Long userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public InsertWord set(String parameterName, Object value) {
      return (InsertWord) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeKid".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link RemoveKid#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public RemoveKid removeKid(java.lang.Long id) throws java.io.IOException {
    RemoveKid result = new RemoveKid(id);
    initialize(result);
    return result;
  }

  public class RemoveKid extends LittletalkersapiRequest<Void> {

    private static final String REST_PATH = "kid/{id}";

    /**
     * Create a request for the method "removeKid".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link RemoveKid#execute()} method to invoke the remote
     * operation. <p> {@link
     * RemoveKid#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveKid(java.lang.Long id) {
      super(Littletalkersapi.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveKid setAlt(java.lang.String alt) {
      return (RemoveKid) super.setAlt(alt);
    }

    @Override
    public RemoveKid setFields(java.lang.String fields) {
      return (RemoveKid) super.setFields(fields);
    }

    @Override
    public RemoveKid setKey(java.lang.String key) {
      return (RemoveKid) super.setKey(key);
    }

    @Override
    public RemoveKid setOauthToken(java.lang.String oauthToken) {
      return (RemoveKid) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveKid setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveKid) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveKid setQuotaUser(java.lang.String quotaUser) {
      return (RemoveKid) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveKid setUserIp(java.lang.String userIp) {
      return (RemoveKid) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Long id;

    /**

     */
    public java.lang.Long getId() {
      return id;
    }

    public RemoveKid setId(java.lang.Long id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveKid set(String parameterName, Object value) {
      return (RemoveKid) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "removeProfile".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link RemoveProfile#execute()} method to invoke the remote
   * operation.
   *
   * @param id
   * @return the request
   */
  public RemoveProfile removeProfile(java.lang.String id) throws java.io.IOException {
    RemoveProfile result = new RemoveProfile(id);
    initialize(result);
    return result;
  }

  public class RemoveProfile extends LittletalkersapiRequest<Void> {

    private static final String REST_PATH = "profile/{id}";

    /**
     * Create a request for the method "removeProfile".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link RemoveProfile#execute()} method to invoke the remote
     * operation. <p> {@link RemoveProfile#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected RemoveProfile(java.lang.String id) {
      super(Littletalkersapi.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public RemoveProfile setAlt(java.lang.String alt) {
      return (RemoveProfile) super.setAlt(alt);
    }

    @Override
    public RemoveProfile setFields(java.lang.String fields) {
      return (RemoveProfile) super.setFields(fields);
    }

    @Override
    public RemoveProfile setKey(java.lang.String key) {
      return (RemoveProfile) super.setKey(key);
    }

    @Override
    public RemoveProfile setOauthToken(java.lang.String oauthToken) {
      return (RemoveProfile) super.setOauthToken(oauthToken);
    }

    @Override
    public RemoveProfile setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RemoveProfile) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RemoveProfile setQuotaUser(java.lang.String quotaUser) {
      return (RemoveProfile) super.setQuotaUser(quotaUser);
    }

    @Override
    public RemoveProfile setUserIp(java.lang.String userIp) {
      return (RemoveProfile) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public RemoveProfile setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public RemoveProfile set(String parameterName, Object value) {
      return (RemoveProfile) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateKid".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link UpdateKid#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.Kid}
   * @return the request
   */
  public UpdateKid updateKid(com.nadajp.littletalkers.server.littletalkersapi.model.Kid content) throws java.io.IOException {
    UpdateKid result = new UpdateKid(content);
    initialize(result);
    return result;
  }

  public class UpdateKid extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.Kid> {

    private static final String REST_PATH = "kid";

    /**
     * Create a request for the method "updateKid".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link UpdateKid#execute()} method to invoke the remote
     * operation. <p> {@link
     * UpdateKid#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.Kid}
     * @since 1.13
     */
    protected UpdateKid(com.nadajp.littletalkers.server.littletalkersapi.model.Kid content) {
      super(Littletalkersapi.this, "PUT", REST_PATH, content, com.nadajp.littletalkers.server.littletalkersapi.model.Kid.class);
    }

    @Override
    public UpdateKid setAlt(java.lang.String alt) {
      return (UpdateKid) super.setAlt(alt);
    }

    @Override
    public UpdateKid setFields(java.lang.String fields) {
      return (UpdateKid) super.setFields(fields);
    }

    @Override
    public UpdateKid setKey(java.lang.String key) {
      return (UpdateKid) super.setKey(key);
    }

    @Override
    public UpdateKid setOauthToken(java.lang.String oauthToken) {
      return (UpdateKid) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateKid setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateKid) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateKid setQuotaUser(java.lang.String quotaUser) {
      return (UpdateKid) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateKid setUserIp(java.lang.String userIp) {
      return (UpdateKid) super.setUserIp(userIp);
    }

    @Override
    public UpdateKid set(String parameterName, Object value) {
      return (UpdateKid) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateProfile".
   *
   * This request holds the parameters needed by the littletalkersapi server.  After setting any
   * optional parameters, call the {@link UpdateProfile#execute()} method to invoke the remote
   * operation.
   *
   * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile}
   * @return the request
   */
  public UpdateProfile updateProfile(com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile content) throws java.io.IOException {
    UpdateProfile result = new UpdateProfile(content);
    initialize(result);
    return result;
  }

  public class UpdateProfile extends LittletalkersapiRequest<com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile> {

    private static final String REST_PATH = "userprofile";

    /**
     * Create a request for the method "updateProfile".
     *
     * This request holds the parameters needed by the the littletalkersapi server.  After setting any
     * optional parameters, call the {@link UpdateProfile#execute()} method to invoke the remote
     * operation. <p> {@link UpdateProfile#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param content the {@link com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile}
     * @since 1.13
     */
    protected UpdateProfile(com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile content) {
      super(Littletalkersapi.this, "PUT", REST_PATH, content, com.nadajp.littletalkers.server.littletalkersapi.model.UserProfile.class);
    }

    @Override
    public UpdateProfile setAlt(java.lang.String alt) {
      return (UpdateProfile) super.setAlt(alt);
    }

    @Override
    public UpdateProfile setFields(java.lang.String fields) {
      return (UpdateProfile) super.setFields(fields);
    }

    @Override
    public UpdateProfile setKey(java.lang.String key) {
      return (UpdateProfile) super.setKey(key);
    }

    @Override
    public UpdateProfile setOauthToken(java.lang.String oauthToken) {
      return (UpdateProfile) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateProfile setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateProfile) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateProfile setQuotaUser(java.lang.String quotaUser) {
      return (UpdateProfile) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateProfile setUserIp(java.lang.String userIp) {
      return (UpdateProfile) super.setUserIp(userIp);
    }

    @Override
    public UpdateProfile set(String parameterName, Object value) {
      return (UpdateProfile) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Littletalkersapi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Littletalkersapi}. */
    @Override
    public Littletalkersapi build() {
      return new Littletalkersapi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link LittletalkersapiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setLittletalkersapiRequestInitializer(
        LittletalkersapiRequestInitializer littletalkersapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(littletalkersapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
